### 观察者模式(Observer Pattern)

#### 1.定义
> 定义对象间的一种一对多的依赖关系，使得每当一个对象的状态改变，则所有依赖于它的对象都会得到通知并被自动更新。

#### 2.使用场景
> * 关联行为场景，需要注意的是，关联行为是可拆分的，而不是“组合”的关系
> * 事件多级触发场景
> * 跨系统的消息交换场景，如消息队列、事件总线的处理机制

#### 3.角色介绍
> Subject:抽象主题
>> 也就是被观察者(Observable)的角色，抽象主题角色把所有观察者对象的引用保存在一个集合中，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。

> ConcreteSubject:具体主题
>> 该角色将有关状态存入具体观察者对象，在具体主题的内部状态发送改变时 ，给所有注册过的观察者发出通知，具体主题角色又叫做具体被观察者角色。

> Observer:抽象观察者
>> 观察者的抽象类，它定义了一个更新接口，使得在得到主题的更改通知时更新自己。

> ConcreteObserver:具体观察者
>> 该角色实现抽象观察者角色定义的更新接口，以便在主题的状态发送变化时更新自身的状态。

#### 4.Android中观察者模式应用
> * ListView的Adapter(BaseAdpater)调用notifyDataSetChanged()方法->DataSetObservable的notifyChanged()方法->遍历所有观察者DataSetObserver，调用onChanged()方法
> * BroadcastReceiver的onReceive就是一个典型的发布-订阅模式即观察者模式

#### 5.事件总线
> EventBus、Otto等